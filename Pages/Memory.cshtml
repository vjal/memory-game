@page "/"
@page "/{keyword}"
@inject HttpClient Http
@using Domain


<div class="card-container container"> 
@foreach (var card in cards)
{
    <div class="card @(!card.IsFlipped ? "flipped" : "") @(card.IsFound ? "found" : "")" onclick="@{() => OnClick(card)}">
        <div class="card-front" style="background-image: url(@card.Url)"></div>
        <div class="card-back"></div>
    </div>
}

@if(game.State == MemoryGameState.Win)
{
    <h1>You win!</h1>
<button class="btn btn-primary" onclick="@Start">Play again!</button>
}

</div>

@functions {
    [Parameter]
    protected string Keyword {get;set;}

    SearchResponse searchResponse = new SearchResponse();
    List<Card> cards= new List<Card>();
    MemoryGame game = new MemoryGame(new List<Card>(), () => offset += 8);
    static int offset = 0;
    protected override async Task OnInitAsync()
    {
        await Start();
    }

    public async Task Start(){
        cards.Clear();
        var search = Keyword;
        if(string.IsNullOrEmpty(search))
            search = "cats";

        searchResponse = await Http.GetJsonAsync<SearchResponse>($"http://api.giphy.com/v1/gifs/search?q={search}&api_key=GDFJUI7emQX0Sxy9KDREeurBI77Symzr&limit=8&offset={offset}");
        foreach(var gif in searchResponse.data){
            cards.Add(new Card {
                Url = gif.Image
                
            });
            cards.Add(new Card {
            Url = gif.Image
                
            });
        }
        Shuffle(cards);
        game = new MemoryGame(cards, () => offset += 8);
    }

    public void OnClick(Card card) {
        game.Guess(card);
    }

    Random rng = new Random();  

    public void Shuffle<T>(IList<T> list)  
    {  
        int n = list.Count;  
        while (n > 1) {  
            n--;  
            int k = rng.Next(n + 1);  
            T value = list[k];  
            list[k] = list[n];  
            list[n] = value;  
        }  
    }

    public class SearchResponse
    {
        public Gif[] data { get; set; } = new Gif[]{};
    }

    public class Gif 
    {
        public string Url {get;set;}
        public Dictionary<string, Image> Images {get;set;} = new Dictionary<string, Image>{};
        public string Image => Images["fixed_height"]?.Url ?? "";
    }

    public class Image {
        public string Url {get;set;}
    }



}