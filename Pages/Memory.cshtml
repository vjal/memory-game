@page "/"
@page "/{keyword}"
@inject HttpClient Http
@using Domain

<div class="card-container container"> 
@foreach (var card in cards)
{
    <div class="card @(!card.IsFlipped ? "flipped" : "") @(card.IsFound ? "found" : "")" onclick="@{() => OnClick(card)}">
        <div class="card-front" style="background-image: url(@card.Url)"></div>
        <div class="card-back"></div>
    </div>
}

@if(game.State == GameState.Win)
{
    <div class="caption">
    <span style="vertical-align:center">
        <h1>Voitit!</h1>
        <button class="btn btn-success btn-lg " onclick="@Start">Uusi peli!</button>
        </span>
    </div>
}

</div>

@functions {
    [Parameter]
    protected string Keyword {get;set;}

    SearchResponse searchResponse = new SearchResponse();
    List<Card> cards= new List<Card>();
    MemoryGame game = new MemoryGame(new List<Card>());
    int offset = 0;
    protected override async Task OnInitAsync()
    {
        await Start();
    }

    public async Task Start()
    {
        var search = Keyword;

        //var url = $"http://api.giphy.com/v1/gifs/search?q={search}&api_key=GDFJUI7emQX0Sxy9KDREeurBI77Symzr&limit=8&offset={offset}";
        var url = string.IsNullOrEmpty(search) 
            ? $"http://api.giphy.com/v1/gifs/trending?api_key=GDFJUI7emQX0Sxy9KDREeurBI77Symzr&limit=8&offset={offset}"
            : $"http://api.giphy.com/v1/gifs/search?q={search}&api_key=GDFJUI7emQX0Sxy9KDREeurBI77Symzr&limit=8&offset={offset}";
        searchResponse = await Http.GetJsonAsync<SearchResponse>(url);
        cards.Clear();
        foreach(var gif in searchResponse.data)
        {
            cards.Add(new Card(gif.Image));
            cards.Add(new Card(gif.Image));
        }
        Shuffle(cards);
        game = new MemoryGame(cards);
        game.OnWin += (sender, ea) => offset +=8;
    }

    public void OnClick(Card card) {
        game.Guess(card);
    }

    Random rng = new Random();  

    public void Shuffle<T>(IList<T> list)  
    {  
        int n = list.Count;  
        while (n > 1) {  
            n--;  
            int k = rng.Next(n + 1);  
            T value = list[k];  
            list[k] = list[n];  
            list[n] = value;  
        }  
    }

    public class SearchResponse
    {
        public Gif[] data { get; set; } = new Gif[]{};
    }

    public class Gif 
    {
        public string Url {get;set;}
        public Dictionary<string, Image> Images {get;set;} = new Dictionary<string, Image>{};
        public string Image => Images["fixed_height"]?.Url ?? "";
    }

    public class Image {
        public string Url {get;set;}
    }
}