#pragma checksum "D:\dev\blazory\Sandbox\Pages\Memory.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "44c6cc09e0936f7f50d76aaa42461199be11b494"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Sandbox.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using Sandbox;
    using Sandbox.Shared;
    using Domain;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/memory")]
    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/memory/{keyword}")]
    public class Memory : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 24 "D:\dev\blazory\Sandbox\Pages\Memory.cshtml"
            
    [Parameter]
    protected string Keyword {get;set;}

    SearchResponse searchResponse = new SearchResponse();
    List<Card> cards= new List<Card>();
    MemoryGame game = new MemoryGame(new List<Card>(), () => offset += 8);
    static int offset = 0;
    protected override async Task OnInitAsync()
    {
        await Start();
    }

    public async Task Start(){
        cards.Clear();
        var search = Keyword;
        if(string.IsNullOrEmpty(search))
            search = "cats";

        searchResponse = await Http.GetJsonAsync<SearchResponse>($"http://api.giphy.com/v1/gifs/search?q={search}&api_key=GDFJUI7emQX0Sxy9KDREeurBI77Symzr&limit=8&offset={offset}");
        foreach(var gif in searchResponse.data){
            cards.Add(new Card {
                Url = gif.Image
                
            });
            cards.Add(new Card {
            Url = gif.Image
                
            });
        }
        Shuffle(cards);
        game = new MemoryGame(cards, () => offset += 8);
    }

    public void OnClick(Card card) {
        game.Guess(card);
    }

    Random rng = new Random();  

    public void Shuffle<T>(IList<T> list)  
    {  
        int n = list.Count;  
        while (n > 1) {  
            n--;  
            int k = rng.Next(n + 1);  
            T value = list[k];  
            list[k] = list[n];  
            list[n] = value;  
        }  
    }

    public class SearchResponse
    {
        public Gif[] data { get; set; } = new Gif[]{};
    }

    public class Gif 
    {
        public string Url {get;set;}
        public Dictionary<string, Image> Images {get;set;} = new Dictionary<string, Image>{};
        public string Image => Images["fixed_height"]?.Url ?? "";
    }

    public class Image {
        public string Url {get;set;}
    }




#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
